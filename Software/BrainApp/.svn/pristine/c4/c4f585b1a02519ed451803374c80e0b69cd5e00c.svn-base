# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui, QtCore

# import the Qt4Agg FigureCanvas object, that binds Figure to
# Qt4Agg backend. It also inherits from QWidget
#from mpl_toolkits.mplot3d import Axes3D
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar

# Matplotlib Figure object
from matplotlib.figure import Figure
from matplotlib.widgets import MultiCursor, SpanSelector

from matplotlib.gridspec import GridSpec

import matplotlib.pyplot as plt

import numpy as np

class MplCanvas(FigureCanvas):
    """Class to represent the FigureCanvas widget"""
    def __init__(self, canvas_type='single'):
        # setup Matplotlib Figure and Axis
        self.fig = Figure()
        if canvas_type == 'multiple':
            self.ax1 = self.fig.add_subplot(411, axisbg='#FFFFFF')
            self.ax2 = self.fig.add_subplot(412, sharex=self.ax1, axisbg='#FFFFFF')
            self.ax3 = self.fig.add_subplot(413, sharex=self.ax1, axisbg='#FFFFFF')
            self.ax4 = self.fig.add_subplot(414, sharex=self.ax1, axisbg='#FFFFFF')
            #self.ax5 = self.fig.add_subplot(815, sharex=self.ax1)
            #self.ax6 = self.fig.add_subplot(816, sharex=self.ax1)
            #self.ax7 = self.fig.add_subplot(817, sharex=self.ax1)
            #self.ax8 = self.fig.add_subplot(818, sharex=self.ax1)
            #self.ax1.set_xticks([])
            #self.ax2.set_xticks([])\
            tick_font_size = 8
            self.ax1.tick_params(axis='both', which='major', labelsize=tick_font_size)
            self.ax1.tick_params(axis='both', which='minor', labelsize=tick_font_size)
            self.ax2.tick_params(axis='both', which='major', labelsize=tick_font_size)
            self.ax2.tick_params(axis='both', which='minor', labelsize=tick_font_size)
            self.ax3.tick_params(axis='both', which='major', labelsize=tick_font_size)
            self.ax3.tick_params(axis='both', which='minor', labelsize=tick_font_size)
            self.ax4.tick_params(axis='both', which='major', labelsize=tick_font_size)
            self.ax4.tick_params(axis='both', which='minor', labelsize=tick_font_size)
            self.fig.subplots_adjust(left=0.05, bottom=0.05, right=0.98, top=0.98, wspace=0.2, hspace=0.0)
        elif canvas_type == 'single':
            #gs = GridSpec(3, 1)
            self.ax1 = self.fig.add_subplot(111, axisbg='#FFFFFF')
            tick_font_size = 8
            self.ax1.tick_params(axis='both', which='major', labelsize=tick_font_size)
            self.ax1.tick_params(axis='both', which='minor', labelsize=tick_font_size)
            self.fig.subplots_adjust(left=0.05, bottom=0.05, right=0.95, top=0.95, wspace=0.2, hspace=0.2)
            #self.ax2 = self.fig.add_subplot(gs[2, 0], axisbg='#FFFFCC')
        else:
            pass
        # initialization of the canvas
        FigureCanvas.__init__(self, self.fig)
        # we define the widget as expandable
        FigureCanvas.setSizePolicy(self,
                                   QtGui.QSizePolicy.Expanding,
                                   QtGui.QSizePolicy.Expanding)
        # notify the system of updated policy
        FigureCanvas.updateGeometry(self)
        
class MplWidget_Multiple(QtGui.QWidget):
    """Widget defined in Qt Designer"""
    def __init__(self, parent = None):
        # initialization of Qt MainWindow widget
        QtGui.QWidget.__init__(self, parent)
        self.setAcceptDrops(True)
        # set the canvas to the Matplotlib widget
        self.canvas = MplCanvas('multiple')
        # Create the navigation toolbar, tied to the canvas
        self.toolbar = NavigationToolbar(self.canvas, parent)

        self.multicursor = MultiCursor(self.canvas, (self.canvas.ax1, self.canvas.ax2, self.canvas.ax3, self.canvas.ax4), color='r', lw=1)
        # create a vertical box layout
        self.vbl = QtGui.QVBoxLayout()
        # add mpl widget to vertical box
        self.vbl.addWidget(self.canvas)
        self.vbl.addWidget(self.toolbar)
        #self.vbl.addWidget(self.multicursor)
        # set the layout to th vertical box
        self.setLayout(self.vbl)
    
    def dragEnterEvent(self, event):
        event.accept()
        #if event.mimeData().hasUrls:
        #    event.accept()
        #else:
        #    event.ignore()

    def dragMoveEvent(self, event):
        event.setDropAction(QtCore.Qt.CopyAction)
        event.accept()
        #if event.mimeData().hasUrls:
        #    event.setDropAction(Qt.CopyAction)
        #    event.accept()
        #else:
        #    event.ignore()
    

    def dropEvent(self, event):
        #print "Parameter Dropped"
        #print event.mimeData().hasText()
        #print event.mimeData().hasUrls()
        #print event.mimeData().hasHtml()
        #print event.mimeData().hasImage()
        #print event.mimeData().hasColor()
        #print event.mimeData().hasFormat('text\plain')
        #print event.mimeData().data()
        #if event.mimeData().hasUrls:
            #event.setDropAction(QtCore.CopyAction)
        event.accept()
        #    links = []
        #    for url in event.mimeData().urls():
        #        links.append(str(url.toLocalFile()))
        self.emit(QtCore.SIGNAL("dropped"))
        #else:
        #event.ignore()

class MplWidget_Single(QtGui.QWidget):
    """Widget defined in Qt Designer"""
    def __init__(self, parent = None):
        # initialization of Qt MainWindow widget
        QtGui.QWidget.__init__(self, parent)
        self.setAcceptDrops(True)
        # set the canvas to the Matplotlib widget
        self.canvas = MplCanvas('single')
        # Create the navigation toolbar, tied to the canvas
        self.toolbar = NavigationToolbar(self.canvas, parent)

        # set useblit True on gtkagg for enhanced performance
        self.span = SpanSelector(self.canvas.ax1, self.onselect, 'horizontal', useblit=True,
                                rectprops=dict(alpha=0.5, facecolor='red') )

        # create a vertical box layout
        self.vbl = QtGui.QVBoxLayout()
        # add mpl widget to vertical box
        self.vbl.addWidget(self.canvas)
        self.vbl.addWidget(self.toolbar)
        # set the layout to th vertical box
        self.setLayout(self.vbl)
    

    def onselect(self, xmin, xmax):
        self.emit(QtCore.SIGNAL("selected"), xmin, xmax)
        
        #print self.canvas.fig.gca().get_lines()
        #print self.canvas.ax1.get_lines()
    #    self.canvas.ax2.clear()
    #    line = self.canvas.ax1.get_lines()[0]
        #line = plt.gca().get_lines()[0]
    #    xd = line.get_xdata()
    #    yd = line.get_ydata()
        
    #    indmin, indmax = np.searchsorted(xd, (xmin, xmax))
    #    indmax = min(len(xd)-1, indmax)
    
    #    thisx = xd[indmin:indmax]
    #    thisy = yd[indmin:indmax]
    #    self.canvas.ax2.plot(thisx, thisy)
        #line2.set_data(thisx, thisy)
    #    self.canvas.ax2.set_xlim(thisx[0], thisx[-1])
    #    self.canvas.ax2.set_ylim(thisy.min(), thisy.max())
    #    self.canvas.draw()
   
    def dragEnterEvent(self, event):
        event.accept()
        #if event.mimeData().hasUrls:
        #    event.accept()
        #else:
        #    event.ignore()

    def dragMoveEvent(self, event):
        event.setDropAction(QtCore.Qt.CopyAction)
        event.accept()
        #if event.mimeData().hasUrls:
        #    event.setDropAction(Qt.CopyAction)
        #    event.accept()
        #else:
        #    event.ignore()
    

    def dropEvent(self, event):
        #print "Parameter Dropped"
        #print event.mimeData().hasText()
        #print event.mimeData().hasUrls()
        #print event.mimeData().hasHtml()
        #print event.mimeData().hasImage()
        #print event.mimeData().hasColor()
        #print event.mimeData().hasFormat('text\plain')
        #print event.mimeData().data()
        #if event.mimeData().hasUrls:
            #event.setDropAction(QtCore.CopyAction)
        event.accept()
        #    links = []
        #    for url in event.mimeData().urls():
        #        links.append(str(url.toLocalFile()))
        self.emit(QtCore.SIGNAL("dropped"))
        #else:
        #    event.ignore()
