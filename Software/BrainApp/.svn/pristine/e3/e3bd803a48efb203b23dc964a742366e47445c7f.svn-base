// nios2.v

// Generated using ACDS version 12.1 177 at 2013.01.25.16:30:01

`timescale 1 ps / 1 ps
module nios2 (
		input  wire        entropic_ip_top_data_36_valid, //  entropic_ip_top.data_36_valid
		input  wire [35:0] entropic_ip_top_data_36,       //                 .data_36
		input  wire [3:0]  entropic_ip_top_fpga_dip_id,   //                 .fpga_dip_id
		output wire        clk166_clk,                    //           clk166.clk
		output wire        tse_config_export,             //       tse_config.export
		output wire [12:0] memory_mem_a,                  //           memory.mem_a
		output wire [2:0]  memory_mem_ba,                 //                 .mem_ba
		output wire [0:0]  memory_mem_ck,                 //                 .mem_ck
		output wire [0:0]  memory_mem_ck_n,               //                 .mem_ck_n
		output wire [0:0]  memory_mem_cke,                //                 .mem_cke
		output wire [0:0]  memory_mem_cs_n,               //                 .mem_cs_n
		output wire [3:0]  memory_mem_dm,                 //                 .mem_dm
		output wire [0:0]  memory_mem_ras_n,              //                 .mem_ras_n
		output wire [0:0]  memory_mem_cas_n,              //                 .mem_cas_n
		output wire [0:0]  memory_mem_we_n,               //                 .mem_we_n
		output wire        memory_mem_reset_n,            //                 .mem_reset_n
		inout  wire [31:0] memory_mem_dq,                 //                 .mem_dq
		inout  wire [3:0]  memory_mem_dqs,                //                 .mem_dqs
		inout  wire [3:0]  memory_mem_dqs_n,              //                 .mem_dqs_n
		output wire [0:0]  memory_mem_odt,                //                 .mem_odt
		input  wire        clk50_clk,                     //            clk50.clk
		output wire        enet_pll_outclk2_clk,          // enet_pll_outclk2.clk
		input  wire        oct_rzqin,                     //              oct.rzqin
		output wire        enet_pll_outclk3_clk,          // enet_pll_outclk3.clk
		input  wire        reset_reset_n,                 //            reset.reset_n
		input  wire [3:0]  tse_mac_rgmii_in,              //          tse_mac.rgmii_in
		output wire [3:0]  tse_mac_rgmii_out,             //                 .rgmii_out
		input  wire        tse_mac_rx_control,            //                 .rx_control
		output wire        tse_mac_tx_control,            //                 .tx_control
		input  wire        tse_mac_tx_clk,                //                 .tx_clk
		input  wire        tse_mac_rx_clk,                //                 .rx_clk
		input  wire        tse_mac_set_10,                //                 .set_10
		input  wire        tse_mac_set_1000,              //                 .set_1000
		output wire        tse_mac_ena_10,                //                 .ena_10
		output wire        tse_mac_eth_mode,              //                 .eth_mode
		output wire        tse_mac_mdio_out,              //                 .mdio_out
		output wire        tse_mac_mdio_oen,              //                 .mdio_oen
		input  wire        tse_mac_mdio_in,               //                 .mdio_in
		output wire        tse_mac_mdc,                   //                 .mdc
		output wire        enet_pll_outclk0_clk,          // enet_pll_outclk0.clk
		output wire        enet_pll_outclk1_clk,          // enet_pll_outclk1.clk
		output wire        pll_0_locked_export            //     pll_0_locked.export
	);

	wire          enet_pll_outclk4_clk;                                                                        // enet_pll:outclk_4 -> mem_if_ddr3_emif_0:pll_ref_clk
	wire          entropic_ip_top_avalon_streaming_source_endofpacket;                                         // entropic_ip_top:avl_str_eop -> tse_mac:ff_tx_eop
	wire          entropic_ip_top_avalon_streaming_source_valid;                                               // entropic_ip_top:avl_str_data_valid -> tse_mac:ff_tx_wren
	wire          entropic_ip_top_avalon_streaming_source_startofpacket;                                       // entropic_ip_top:avl_str_sop -> tse_mac:ff_tx_sop
	wire          entropic_ip_top_avalon_streaming_source_error;                                               // entropic_ip_top:avl_str_error -> tse_mac:ff_tx_err
	wire    [1:0] entropic_ip_top_avalon_streaming_source_empty;                                               // entropic_ip_top:avl_str_empty -> tse_mac:ff_tx_mod
	wire   [31:0] entropic_ip_top_avalon_streaming_source_data;                                                // entropic_ip_top:avl_str_data -> tse_mac:ff_tx_data
	wire          entropic_ip_top_avalon_streaming_source_ready;                                               // tse_mac:ff_tx_rdy -> entropic_ip_top:avl_str_ready
	wire          tse_mac_receive_endofpacket;                                                                 // tse_mac:ff_rx_eop -> entropic_ip_top:avl_sink_eop
	wire          tse_mac_receive_valid;                                                                       // tse_mac:ff_rx_dval -> entropic_ip_top:avl_sink_data_valid
	wire          tse_mac_receive_startofpacket;                                                               // tse_mac:ff_rx_sop -> entropic_ip_top:avl_sink_sop
	wire    [5:0] tse_mac_receive_error;                                                                       // tse_mac:rx_err -> entropic_ip_top:avl_sink_error
	wire    [1:0] tse_mac_receive_empty;                                                                       // tse_mac:ff_rx_mod -> entropic_ip_top:avl_sink_empty
	wire   [31:0] tse_mac_receive_data;                                                                        // tse_mac:ff_rx_data -> entropic_ip_top:avl_sink_data
	wire          tse_mac_receive_ready;                                                                       // entropic_ip_top:avl_sink_ready -> tse_mac:ff_rx_rdy
	wire          tse_config_avalon_master_waitrequest;                                                        // tse_config_avalon_master_translator:av_waitrequest -> tse_config:waitrequest
	wire   [31:0] tse_config_avalon_master_writedata;                                                          // tse_config:writedata -> tse_config_avalon_master_translator:av_writedata
	wire   [31:0] tse_config_avalon_master_address;                                                            // tse_config:address -> tse_config_avalon_master_translator:av_address
	wire          tse_config_avalon_master_write;                                                              // tse_config:write -> tse_config_avalon_master_translator:av_write
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_waitrequest;                   // tse_mac_control_port_translator:uav_waitrequest -> tse_config_avalon_master_translator:uav_waitrequest
	wire    [2:0] tse_config_avalon_master_translator_avalon_universal_master_0_burstcount;                    // tse_config_avalon_master_translator:uav_burstcount -> tse_mac_control_port_translator:uav_burstcount
	wire   [31:0] tse_config_avalon_master_translator_avalon_universal_master_0_writedata;                     // tse_config_avalon_master_translator:uav_writedata -> tse_mac_control_port_translator:uav_writedata
	wire   [31:0] tse_config_avalon_master_translator_avalon_universal_master_0_address;                       // tse_config_avalon_master_translator:uav_address -> tse_mac_control_port_translator:uav_address
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_lock;                          // tse_config_avalon_master_translator:uav_lock -> tse_mac_control_port_translator:uav_lock
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_write;                         // tse_config_avalon_master_translator:uav_write -> tse_mac_control_port_translator:uav_write
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_read;                          // tse_config_avalon_master_translator:uav_read -> tse_mac_control_port_translator:uav_read
	wire   [31:0] tse_config_avalon_master_translator_avalon_universal_master_0_readdata;                      // tse_mac_control_port_translator:uav_readdata -> tse_config_avalon_master_translator:uav_readdata
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_debugaccess;                   // tse_config_avalon_master_translator:uav_debugaccess -> tse_mac_control_port_translator:uav_debugaccess
	wire    [3:0] tse_config_avalon_master_translator_avalon_universal_master_0_byteenable;                    // tse_config_avalon_master_translator:uav_byteenable -> tse_mac_control_port_translator:uav_byteenable
	wire          tse_config_avalon_master_translator_avalon_universal_master_0_readdatavalid;                 // tse_mac_control_port_translator:uav_readdatavalid -> tse_config_avalon_master_translator:uav_readdatavalid
	wire          tse_mac_control_port_translator_avalon_anti_slave_0_waitrequest;                             // tse_mac:waitrequest -> tse_mac_control_port_translator:av_waitrequest
	wire   [31:0] tse_mac_control_port_translator_avalon_anti_slave_0_writedata;                               // tse_mac_control_port_translator:av_writedata -> tse_mac:writedata
	wire    [7:0] tse_mac_control_port_translator_avalon_anti_slave_0_address;                                 // tse_mac_control_port_translator:av_address -> tse_mac:address
	wire          tse_mac_control_port_translator_avalon_anti_slave_0_write;                                   // tse_mac_control_port_translator:av_write -> tse_mac:write
	wire          tse_mac_control_port_translator_avalon_anti_slave_0_read;                                    // tse_mac_control_port_translator:av_read -> tse_mac:read
	wire   [31:0] tse_mac_control_port_translator_avalon_anti_slave_0_readdata;                                // tse_mac:readdata -> tse_mac_control_port_translator:av_readdata
	wire          entropic_ip_top_avalon_master_waitrequest;                                                   // entropic_ip_top_avalon_master_translator:av_waitrequest -> entropic_ip_top:avl_ready
	wire    [2:0] entropic_ip_top_avalon_master_burstcount;                                                    // entropic_ip_top:avl_size -> entropic_ip_top_avalon_master_translator:av_burstcount
	wire  [127:0] entropic_ip_top_avalon_master_writedata;                                                     // entropic_ip_top:avl_wdata -> entropic_ip_top_avalon_master_translator:av_writedata
	wire   [31:0] entropic_ip_top_avalon_master_address;                                                       // entropic_ip_top:avl_addr -> entropic_ip_top_avalon_master_translator:av_address
	wire          entropic_ip_top_avalon_master_write;                                                         // entropic_ip_top:avl_write_req -> entropic_ip_top_avalon_master_translator:av_write
	wire   [15:0] entropic_ip_top_avalon_master_byteenable;                                                    // entropic_ip_top:avl_be -> entropic_ip_top_avalon_master_translator:av_byteenable
	wire          entropic_ip_top_avalon_master_1_waitrequest;                                                 // entropic_ip_top_avalon_master_1_translator:av_waitrequest -> entropic_ip_top:avl_read_ready
	wire   [31:0] entropic_ip_top_avalon_master_1_address;                                                     // entropic_ip_top:avl_read_addr -> entropic_ip_top_avalon_master_1_translator:av_address
	wire          entropic_ip_top_avalon_master_1_read;                                                        // entropic_ip_top:avl_read_read_req -> entropic_ip_top_avalon_master_1_translator:av_read
	wire  [127:0] entropic_ip_top_avalon_master_1_readdata;                                                    // entropic_ip_top_avalon_master_1_translator:av_readdata -> entropic_ip_top:avl_read_rdata
	wire   [15:0] entropic_ip_top_avalon_master_1_byteenable;                                                  // entropic_ip_top:avl_read_be -> entropic_ip_top_avalon_master_1_translator:av_byteenable
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_waitrequest;                           // mem_if_ddr3_emif_0:avl_ready -> mem_if_ddr3_emif_0_avl_translator:av_waitrequest
	wire    [2:0] mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_burstcount;                            // mem_if_ddr3_emif_0_avl_translator:av_burstcount -> mem_if_ddr3_emif_0:avl_size
	wire  [127:0] mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_writedata;                             // mem_if_ddr3_emif_0_avl_translator:av_writedata -> mem_if_ddr3_emif_0:avl_wdata
	wire   [23:0] mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_address;                               // mem_if_ddr3_emif_0_avl_translator:av_address -> mem_if_ddr3_emif_0:avl_addr
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_write;                                 // mem_if_ddr3_emif_0_avl_translator:av_write -> mem_if_ddr3_emif_0:avl_write_req
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_beginbursttransfer;                    // mem_if_ddr3_emif_0_avl_translator:av_beginbursttransfer -> mem_if_ddr3_emif_0:avl_burstbegin
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_read;                                  // mem_if_ddr3_emif_0_avl_translator:av_read -> mem_if_ddr3_emif_0:avl_read_req
	wire  [127:0] mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdata;                              // mem_if_ddr3_emif_0:avl_rdata -> mem_if_ddr3_emif_0_avl_translator:av_readdata
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdatavalid;                         // mem_if_ddr3_emif_0:avl_rdata_valid -> mem_if_ddr3_emif_0_avl_translator:av_readdatavalid
	wire   [15:0] mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_byteenable;                            // mem_if_ddr3_emif_0_avl_translator:av_byteenable -> mem_if_ddr3_emif_0:avl_be
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_waitrequest;              // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> entropic_ip_top_avalon_master_translator:uav_waitrequest
	wire    [6:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_burstcount;               // entropic_ip_top_avalon_master_translator:uav_burstcount -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_writedata;                // entropic_ip_top_avalon_master_translator:uav_writedata -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_address;                  // entropic_ip_top_avalon_master_translator:uav_address -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_lock;                     // entropic_ip_top_avalon_master_translator:uav_lock -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_write;                    // entropic_ip_top_avalon_master_translator:uav_write -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_read;                     // entropic_ip_top_avalon_master_translator:uav_read -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdata;                 // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> entropic_ip_top_avalon_master_translator:uav_readdata
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_debugaccess;              // entropic_ip_top_avalon_master_translator:uav_debugaccess -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_byteenable;               // entropic_ip_top_avalon_master_translator:uav_byteenable -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdatavalid;            // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> entropic_ip_top_avalon_master_translator:uav_readdatavalid
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_waitrequest;            // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_waitrequest -> entropic_ip_top_avalon_master_1_translator:uav_waitrequest
	wire    [4:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_burstcount;             // entropic_ip_top_avalon_master_1_translator:uav_burstcount -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_writedata;              // entropic_ip_top_avalon_master_1_translator:uav_writedata -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_address;                // entropic_ip_top_avalon_master_1_translator:uav_address -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_address
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_lock;                   // entropic_ip_top_avalon_master_1_translator:uav_lock -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_lock
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_write;                  // entropic_ip_top_avalon_master_1_translator:uav_write -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_write
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_read;                   // entropic_ip_top_avalon_master_1_translator:uav_read -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdata;               // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_readdata -> entropic_ip_top_avalon_master_1_translator:uav_readdata
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_debugaccess;            // entropic_ip_top_avalon_master_1_translator:uav_debugaccess -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_byteenable;             // entropic_ip_top_avalon_master_1_translator:uav_byteenable -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_byteenable
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdatavalid;          // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:av_readdatavalid -> entropic_ip_top_avalon_master_1_translator:uav_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // mem_if_ddr3_emif_0_avl_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [6:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_burstcount;              // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_translator:uav_burstcount
	wire  [127:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_writedata;               // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_translator:uav_writedata
	wire   [31:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_address;                 // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_address -> mem_if_ddr3_emif_0_avl_translator:uav_address
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_write;                   // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_write -> mem_if_ddr3_emif_0_avl_translator:uav_write
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_lock;                    // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_lock -> mem_if_ddr3_emif_0_avl_translator:uav_lock
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_read;                    // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_read -> mem_if_ddr3_emif_0_avl_translator:uav_read
	wire  [127:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdata;                // mem_if_ddr3_emif_0_avl_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // mem_if_ddr3_emif_0_avl_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_translator:uav_debugaccess
	wire   [15:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_byteenable;              // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_valid;            // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [217:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_data;             // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_ready;            // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [217:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [127:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;     // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;           // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;   // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [216:0] entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_data;            // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;           // addr_router:sink_ready -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_endofpacket;   // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_valid;         // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_startofpacket; // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [216:0] entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_data;          // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router_001:sink_ready -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:cp_ready
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_valid;                   // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [216:0] mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_data;                    // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:rp_ready
	wire          rst_controller_reset_out_reset;                                                              // rst_controller:reset_out -> [addr_router:reset, addr_router_001:reset, cmd_xbar_demux:reset, cmd_xbar_demux_001:reset, entropic_ip_top:reset, entropic_ip_top_avalon_master_1_translator:reset, entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:reset, entropic_ip_top_avalon_master_translator:reset, entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:reset, tse_config:reset, tse_config_avalon_master_translator:reset, tse_mac:reset, tse_mac_control_port_translator:reset]
	wire          rst_controller_001_reset_out_reset;                                                          // rst_controller_001:reset_out -> enet_pll:rst
	wire          rst_controller_002_reset_out_reset;                                                          // rst_controller_002:reset_out -> [cmd_xbar_mux:reset, id_router:reset, mem_if_ddr3_emif_0_avl_translator:reset, mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:reset, mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo:reset, rsp_xbar_demux:reset]
	wire          mem_if_ddr3_emif_0_afi_reset_reset;                                                          // mem_if_ddr3_emif_0:afi_reset_n -> rst_controller_002:reset_in0
	wire          cmd_xbar_demux_src0_endofpacket;                                                             // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                   // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                           // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [216:0] cmd_xbar_demux_src0_data;                                                                    // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [1:0] cmd_xbar_demux_src0_channel;                                                                 // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                   // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                         // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                               // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                       // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [216:0] cmd_xbar_demux_001_src0_data;                                                                // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire    [1:0] cmd_xbar_demux_001_src0_channel;                                                             // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                               // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                             // rsp_xbar_demux:src0_endofpacket -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                   // rsp_xbar_demux:src0_valid -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                           // rsp_xbar_demux:src0_startofpacket -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [216:0] rsp_xbar_demux_src0_data;                                                                    // rsp_xbar_demux:src0_data -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [1:0] rsp_xbar_demux_src0_channel;                                                                 // rsp_xbar_demux:src0_channel -> entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_demux_src1_endofpacket;                                                             // rsp_xbar_demux:src1_endofpacket -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                   // rsp_xbar_demux:src1_valid -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                           // rsp_xbar_demux:src1_startofpacket -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [216:0] rsp_xbar_demux_src1_data;                                                                    // rsp_xbar_demux:src1_data -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_data
	wire    [1:0] rsp_xbar_demux_src1_channel;                                                                 // rsp_xbar_demux:src1_channel -> entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_channel
	wire          addr_router_src_endofpacket;                                                                 // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                       // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                               // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [216:0] addr_router_src_data;                                                                        // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire    [1:0] addr_router_src_channel;                                                                     // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                       // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          rsp_xbar_demux_src0_ready;                                                                   // entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_demux:src0_ready
	wire          addr_router_001_src_endofpacket;                                                             // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                   // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                           // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [216:0] addr_router_001_src_data;                                                                    // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire    [1:0] addr_router_001_src_channel;                                                                 // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                   // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          rsp_xbar_demux_src1_ready;                                                                   // entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_demux:src1_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                // cmd_xbar_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                      // cmd_xbar_mux:src_valid -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                              // cmd_xbar_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [216:0] cmd_xbar_mux_src_data;                                                                       // cmd_xbar_mux:src_data -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_data
	wire    [1:0] cmd_xbar_mux_src_channel;                                                                    // cmd_xbar_mux:src_channel -> mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_src_ready;                                                                      // mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire          id_router_src_endofpacket;                                                                   // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                         // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                 // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [216:0] id_router_src_data;                                                                          // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [1:0] id_router_src_channel;                                                                       // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                         // rsp_xbar_demux:sink_ready -> id_router:src_ready

	nios2_mem_if_ddr3_emif_0 mem_if_ddr3_emif_0 (
		.pll_ref_clk       (enet_pll_outclk4_clk),                                                     //  pll_ref_clk.clk
		.global_reset_n    (reset_reset_n),                                                            // global_reset.reset_n
		.soft_reset_n      (reset_reset_n),                                                            //   soft_reset.reset_n
		.afi_clk           (clk166_clk),                                                               //      afi_clk.clk
		.afi_half_clk      (),                                                                         // afi_half_clk.clk
		.afi_reset_n       (mem_if_ddr3_emif_0_afi_reset_reset),                                       //    afi_reset.reset_n
		.mem_a             (memory_mem_a),                                                             //       memory.mem_a
		.mem_ba            (memory_mem_ba),                                                            //             .mem_ba
		.mem_ck            (memory_mem_ck),                                                            //             .mem_ck
		.mem_ck_n          (memory_mem_ck_n),                                                          //             .mem_ck_n
		.mem_cke           (memory_mem_cke),                                                           //             .mem_cke
		.mem_cs_n          (memory_mem_cs_n),                                                          //             .mem_cs_n
		.mem_dm            (memory_mem_dm),                                                            //             .mem_dm
		.mem_ras_n         (memory_mem_ras_n),                                                         //             .mem_ras_n
		.mem_cas_n         (memory_mem_cas_n),                                                         //             .mem_cas_n
		.mem_we_n          (memory_mem_we_n),                                                          //             .mem_we_n
		.mem_reset_n       (memory_mem_reset_n),                                                       //             .mem_reset_n
		.mem_dq            (memory_mem_dq),                                                            //             .mem_dq
		.mem_dqs           (memory_mem_dqs),                                                           //             .mem_dqs
		.mem_dqs_n         (memory_mem_dqs_n),                                                         //             .mem_dqs_n
		.mem_odt           (memory_mem_odt),                                                           //             .mem_odt
		.avl_ready         (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_waitrequest),        //          avl.waitrequest_n
		.avl_burstbegin    (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_beginbursttransfer), //             .beginbursttransfer
		.avl_addr          (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_address),            //             .address
		.avl_rdata_valid   (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdatavalid),      //             .readdatavalid
		.avl_rdata         (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdata),           //             .readdata
		.avl_wdata         (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_writedata),          //             .writedata
		.avl_be            (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_byteenable),         //             .byteenable
		.avl_read_req      (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_read),               //             .read
		.avl_write_req     (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_write),              //             .write
		.avl_size          (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_burstcount),         //             .burstcount
		.local_init_done   (),                                                                         //       status.local_init_done
		.local_cal_success (),                                                                         //             .local_cal_success
		.local_cal_fail    (),                                                                         //             .local_cal_fail
		.oct_rzqin         (oct_rzqin)                                                                 //          oct.rzqin
	);

	nios2_tse_mac tse_mac (
		.ff_tx_data  (entropic_ip_top_avalon_streaming_source_data),                    //                      transmit.data
		.ff_tx_eop   (entropic_ip_top_avalon_streaming_source_endofpacket),             //                              .endofpacket
		.ff_tx_err   (entropic_ip_top_avalon_streaming_source_error),                   //                              .error
		.ff_tx_mod   (entropic_ip_top_avalon_streaming_source_empty),                   //                              .empty
		.ff_tx_rdy   (entropic_ip_top_avalon_streaming_source_ready),                   //                              .ready
		.ff_tx_sop   (entropic_ip_top_avalon_streaming_source_startofpacket),           //                              .startofpacket
		.ff_tx_wren  (entropic_ip_top_avalon_streaming_source_valid),                   //                              .valid
		.ff_tx_clk   (clk166_clk),                                                      //      receive_clock_connection.clk
		.ff_rx_data  (tse_mac_receive_data),                                            //                       receive.data
		.ff_rx_dval  (tse_mac_receive_valid),                                           //                              .valid
		.ff_rx_eop   (tse_mac_receive_endofpacket),                                     //                              .endofpacket
		.ff_rx_mod   (tse_mac_receive_empty),                                           //                              .empty
		.ff_rx_rdy   (tse_mac_receive_ready),                                           //                              .ready
		.ff_rx_sop   (tse_mac_receive_startofpacket),                                   //                              .startofpacket
		.rx_err      (tse_mac_receive_error),                                           //                              .error
		.ff_rx_clk   (clk166_clk),                                                      //     transmit_clock_connection.clk
		.address     (tse_mac_control_port_translator_avalon_anti_slave_0_address),     //                  control_port.address
		.readdata    (tse_mac_control_port_translator_avalon_anti_slave_0_readdata),    //                              .readdata
		.read        (tse_mac_control_port_translator_avalon_anti_slave_0_read),        //                              .read
		.writedata   (tse_mac_control_port_translator_avalon_anti_slave_0_writedata),   //                              .writedata
		.write       (tse_mac_control_port_translator_avalon_anti_slave_0_write),       //                              .write
		.waitrequest (tse_mac_control_port_translator_avalon_anti_slave_0_waitrequest), //                              .waitrequest
		.clk         (clk166_clk),                                                      // control_port_clock_connection.clk
		.reset       (rst_controller_reset_out_reset),                                  //              reset_connection.reset
		.rgmii_in    (tse_mac_rgmii_in),                                                //            conduit_connection.export
		.rgmii_out   (tse_mac_rgmii_out),                                               //                              .export
		.rx_control  (tse_mac_rx_control),                                              //                              .export
		.tx_control  (tse_mac_tx_control),                                              //                              .export
		.tx_clk      (tse_mac_tx_clk),                                                  //                              .export
		.rx_clk      (tse_mac_rx_clk),                                                  //                              .export
		.set_10      (tse_mac_set_10),                                                  //                              .export
		.set_1000    (tse_mac_set_1000),                                                //                              .export
		.ena_10      (tse_mac_ena_10),                                                  //                              .export
		.eth_mode    (tse_mac_eth_mode),                                                //                              .export
		.mdio_out    (tse_mac_mdio_out),                                                //                              .export
		.mdio_oen    (tse_mac_mdio_oen),                                                //                              .export
		.mdio_in     (tse_mac_mdio_in),                                                 //                              .export
		.mdc         (tse_mac_mdc)                                                      //                              .export
	);

	tse_config tse_config (
		.reset        (rst_controller_reset_out_reset),       //         reset.reset
		.clk166       (clk166_clk),                           //    clock_sink.clk
		.write        (tse_config_avalon_master_write),       // avalon_master.write
		.address      (tse_config_avalon_master_address),     //              .address
		.writedata    (tse_config_avalon_master_writedata),   //              .writedata
		.waitrequest  (tse_config_avalon_master_waitrequest), //              .waitrequest
		.tse_sleeping (tse_config_export)                     //   conduit_end.export
	);

	nios2_enet_pll enet_pll (
		.refclk   (clk50_clk),                          //  refclk.clk
		.rst      (rst_controller_001_reset_out_reset), //   reset.reset
		.outclk_0 (enet_pll_outclk0_clk),               // outclk0.clk
		.outclk_1 (enet_pll_outclk1_clk),               // outclk1.clk
		.outclk_2 (enet_pll_outclk2_clk),               // outclk2.clk
		.outclk_3 (enet_pll_outclk3_clk),               // outclk3.clk
		.outclk_4 (enet_pll_outclk4_clk),               // outclk4.clk
		.locked   (pll_0_locked_export)                 //  locked.export
	);

	entropic_ip_top entropic_ip_top (
		.reset               (rst_controller_reset_out_reset),                        //                   reset.reset
		.clk166              (clk166_clk),                                            //              clock_sink.clk
		.data_36_valid       (entropic_ip_top_data_36_valid),                         //             conduit_end.export
		.data_36             (entropic_ip_top_data_36),                               //                        .export
		.fpga_dip_id         (entropic_ip_top_fpga_dip_id),                           //                        .export
		.avl_addr            (entropic_ip_top_avalon_master_address),                 //           avalon_master.address
		.avl_size            (entropic_ip_top_avalon_master_burstcount),              //                        .burstcount
		.avl_be              (entropic_ip_top_avalon_master_byteenable),              //                        .byteenable
		.avl_ready           (~entropic_ip_top_avalon_master_waitrequest),            //                        .waitrequest_n
		.avl_wdata           (entropic_ip_top_avalon_master_writedata),               //                        .writedata
		.avl_write_req       (entropic_ip_top_avalon_master_write),                   //                        .write
		.avl_read_addr       (entropic_ip_top_avalon_master_1_address),               //         avalon_master_1.address
		.avl_read_rdata      (entropic_ip_top_avalon_master_1_readdata),              //                        .readdata
		.avl_read_be         (entropic_ip_top_avalon_master_1_byteenable),            //                        .byteenable
		.avl_read_read_req   (entropic_ip_top_avalon_master_1_read),                  //                        .read
		.avl_read_ready      (~entropic_ip_top_avalon_master_1_waitrequest),          //                        .waitrequest_n
		.avl_str_sop         (entropic_ip_top_avalon_streaming_source_startofpacket), // avalon_streaming_source.startofpacket
		.avl_str_eop         (entropic_ip_top_avalon_streaming_source_endofpacket),   //                        .endofpacket
		.avl_str_data        (entropic_ip_top_avalon_streaming_source_data),          //                        .data
		.avl_str_data_valid  (entropic_ip_top_avalon_streaming_source_valid),         //                        .valid
		.avl_str_empty       (entropic_ip_top_avalon_streaming_source_empty),         //                        .empty
		.avl_str_ready       (entropic_ip_top_avalon_streaming_source_ready),         //                        .ready
		.avl_str_error       (entropic_ip_top_avalon_streaming_source_error),         //                        .error
		.avl_sink_sop        (tse_mac_receive_startofpacket),                         //   avalon_streaming_sink.startofpacket
		.avl_sink_eop        (tse_mac_receive_endofpacket),                           //                        .endofpacket
		.avl_sink_data       (tse_mac_receive_data),                                  //                        .data
		.avl_sink_data_valid (tse_mac_receive_valid),                                 //                        .valid
		.avl_sink_empty      (tse_mac_receive_empty),                                 //                        .empty
		.avl_sink_ready      (tse_mac_receive_ready),                                 //                        .ready
		.avl_sink_error      (tse_mac_receive_error)                                  //                        .error
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tse_config_avalon_master_translator (
		.clk                   (clk166_clk),                                                                  //                       clk.clk
		.reset                 (rst_controller_reset_out_reset),                                              //                     reset.reset
		.uav_address           (tse_config_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount        (tse_config_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read              (tse_config_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write             (tse_config_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest       (tse_config_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid     (tse_config_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable        (tse_config_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata          (tse_config_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata         (tse_config_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock              (tse_config_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess       (tse_config_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address            (tse_config_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest        (tse_config_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_write              (tse_config_avalon_master_write),                                              //                          .write
		.av_writedata          (tse_config_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount         (1'b1),                                                                        //               (terminated)
		.av_byteenable         (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer (1'b0),                                                                        //               (terminated)
		.av_begintransfer      (1'b0),                                                                        //               (terminated)
		.av_chipselect         (1'b0),                                                                        //               (terminated)
		.av_read               (1'b0),                                                                        //               (terminated)
		.av_readdata           (),                                                                            //               (terminated)
		.av_readdatavalid      (),                                                                            //               (terminated)
		.av_lock               (1'b0),                                                                        //               (terminated)
		.av_debugaccess        (1'b0),                                                                        //               (terminated)
		.uav_clken             (),                                                                            //               (terminated)
		.av_clken              (1'b1)                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tse_mac_control_port_translator (
		.clk                   (clk166_clk),                                                                  //                      clk.clk
		.reset                 (rst_controller_reset_out_reset),                                              //                    reset.reset
		.uav_address           (tse_config_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount        (tse_config_avalon_master_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read              (tse_config_avalon_master_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write             (tse_config_avalon_master_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest       (tse_config_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid     (tse_config_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable        (tse_config_avalon_master_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata          (tse_config_avalon_master_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata         (tse_config_avalon_master_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock              (tse_config_avalon_master_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess       (tse_config_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address            (tse_mac_control_port_translator_avalon_anti_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write              (tse_mac_control_port_translator_avalon_anti_slave_0_write),                   //                         .write
		.av_read               (tse_mac_control_port_translator_avalon_anti_slave_0_read),                    //                         .read
		.av_readdata           (tse_mac_control_port_translator_avalon_anti_slave_0_readdata),                //                         .readdata
		.av_writedata          (tse_mac_control_port_translator_avalon_anti_slave_0_writedata),               //                         .writedata
		.av_waitrequest        (tse_mac_control_port_translator_avalon_anti_slave_0_waitrequest),             //                         .waitrequest
		.av_begintransfer      (),                                                                            //              (terminated)
		.av_beginbursttransfer (),                                                                            //              (terminated)
		.av_burstcount         (),                                                                            //              (terminated)
		.av_byteenable         (),                                                                            //              (terminated)
		.av_readdatavalid      (1'b0),                                                                        //              (terminated)
		.av_writebyteenable    (),                                                                            //              (terminated)
		.av_lock               (),                                                                            //              (terminated)
		.av_chipselect         (),                                                                            //              (terminated)
		.av_clken              (),                                                                            //              (terminated)
		.uav_clken             (1'b0),                                                                        //              (terminated)
		.av_debugaccess        (),                                                                            //              (terminated)
		.av_outputenable       ()                                                                             //              (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) entropic_ip_top_avalon_master_translator (
		.clk                   (clk166_clk),                                                                       //                       clk.clk
		.reset                 (rst_controller_reset_out_reset),                                                   //                     reset.reset
		.uav_address           (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount        (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read              (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write             (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest       (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid     (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable        (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata          (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock              (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess       (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address            (entropic_ip_top_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest        (entropic_ip_top_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount         (entropic_ip_top_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable         (entropic_ip_top_avalon_master_byteenable),                                         //                          .byteenable
		.av_write              (entropic_ip_top_avalon_master_write),                                              //                          .write
		.av_writedata          (entropic_ip_top_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer (1'b0),                                                                             //               (terminated)
		.av_begintransfer      (1'b0),                                                                             //               (terminated)
		.av_chipselect         (1'b0),                                                                             //               (terminated)
		.av_read               (1'b0),                                                                             //               (terminated)
		.av_readdata           (),                                                                                 //               (terminated)
		.av_readdatavalid      (),                                                                                 //               (terminated)
		.av_lock               (1'b0),                                                                             //               (terminated)
		.av_debugaccess        (1'b0),                                                                             //               (terminated)
		.uav_clken             (),                                                                                 //               (terminated)
		.av_clken              (1'b1)                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) entropic_ip_top_avalon_master_1_translator (
		.clk                   (clk166_clk),                                                                                                                            //                       clk.clk
		.reset                 (rst_controller_reset_out_reset),                                                                                                        //                     reset.reset
		.uav_address           (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_address),                                                          // avalon_universal_master_0.address
		.uav_burstcount        (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_burstcount),                                                       //                          .burstcount
		.uav_read              (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_read),                                                             //                          .read
		.uav_write             (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_write),                                                            //                          .write
		.uav_waitrequest       (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_waitrequest),                                                      //                          .waitrequest
		.uav_readdatavalid     (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdatavalid),                                                    //                          .readdatavalid
		.uav_byteenable        (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_byteenable),                                                       //                          .byteenable
		.uav_readdata          (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdata),                                                         //                          .readdata
		.uav_writedata         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_writedata),                                                        //                          .writedata
		.uav_lock              (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_lock),                                                             //                          .lock
		.uav_debugaccess       (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_debugaccess),                                                      //                          .debugaccess
		.av_address            (entropic_ip_top_avalon_master_1_address),                                                                                               //      avalon_anti_master_0.address
		.av_waitrequest        (entropic_ip_top_avalon_master_1_waitrequest),                                                                                           //                          .waitrequest
		.av_byteenable         (entropic_ip_top_avalon_master_1_byteenable),                                                                                            //                          .byteenable
		.av_read               (entropic_ip_top_avalon_master_1_read),                                                                                                  //                          .read
		.av_readdata           (entropic_ip_top_avalon_master_1_readdata),                                                                                              //                          .readdata
		.av_burstcount         (1'b1),                                                                                                                                  //               (terminated)
		.av_beginbursttransfer (1'b0),                                                                                                                                  //               (terminated)
		.av_begintransfer      (1'b0),                                                                                                                                  //               (terminated)
		.av_chipselect         (1'b0),                                                                                                                                  //               (terminated)
		.av_readdatavalid      (),                                                                                                                                      //               (terminated)
		.av_write              (1'b0),                                                                                                                                  //               (terminated)
		.av_writedata          (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock               (1'b0),                                                                                                                                  //               (terminated)
		.av_debugaccess        (1'b0),                                                                                                                                  //               (terminated)
		.uav_clken             (),                                                                                                                                      //               (terminated)
		.av_clken              (1'b1)                                                                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (7),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_translator (
		.clk                   (clk166_clk),                                                                        //                      clk.clk
		.reset                 (rst_controller_002_reset_out_reset),                                                //                    reset.reset
		.uav_address           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount        (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read              (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write             (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest       (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid     (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable        (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock              (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess       (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address            (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_address),                     //      avalon_anti_slave_0.address
		.av_write              (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_write),                       //                         .write
		.av_read               (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_read),                        //                         .read
		.av_readdata           (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdata),                    //                         .readdata
		.av_writedata          (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_writedata),                   //                         .writedata
		.av_beginbursttransfer (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_beginbursttransfer),          //                         .beginbursttransfer
		.av_burstcount         (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_burstcount),                  //                         .burstcount
		.av_byteenable         (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_byteenable),                  //                         .byteenable
		.av_readdatavalid      (mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_readdatavalid),               //                         .readdatavalid
		.av_waitrequest        (~mem_if_ddr3_emif_0_avl_translator_avalon_anti_slave_0_waitrequest),                //                         .waitrequest
		.av_begintransfer      (),                                                                                  //              (terminated)
		.av_writebyteenable    (),                                                                                  //              (terminated)
		.av_lock               (),                                                                                  //              (terminated)
		.av_chipselect         (),                                                                                  //              (terminated)
		.av_clken              (),                                                                                  //              (terminated)
		.uav_clken             (1'b0),                                                                              //              (terminated)
		.av_debugaccess        (),                                                                                  //              (terminated)
		.av_outputenable       ()                                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BEGIN_BURST           (203),
		.PKT_BURSTWRAP_H           (195),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BURST_SIZE_H          (198),
		.PKT_BURST_SIZE_L          (196),
		.PKT_BURST_TYPE_H          (200),
		.PKT_BURST_TYPE_L          (199),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (205),
		.PKT_SRC_ID_L              (205),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (206),
		.PKT_THREAD_ID_H           (207),
		.PKT_THREAD_ID_L           (207),
		.PKT_CACHE_H               (214),
		.PKT_CACHE_L               (211),
		.PKT_DATA_SIDEBAND_H       (202),
		.PKT_DATA_SIDEBAND_L       (202),
		.PKT_QOS_H                 (204),
		.PKT_QOS_L                 (204),
		.PKT_ADDR_SIDEBAND_H       (201),
		.PKT_ADDR_SIDEBAND_L       (201),
		.ST_DATA_W                 (217),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (4'b0000)
	) entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent (
		.clk              (clk166_clk),                                                                                //       clk.clk
		.reset            (rst_controller_reset_out_reset),                                                            // clk_reset.reset
		.av_address       (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read          (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata     (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata      (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest   (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable    (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount    (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess   (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock          (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data          (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket   (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid         (rsp_xbar_demux_src0_valid),                                                                 //        rp.valid
		.rp_data          (rsp_xbar_demux_src0_data),                                                                  //          .data
		.rp_channel       (rsp_xbar_demux_src0_channel),                                                               //          .channel
		.rp_startofpacket (rsp_xbar_demux_src0_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket   (rsp_xbar_demux_src0_endofpacket),                                                           //          .endofpacket
		.rp_ready         (rsp_xbar_demux_src0_ready)                                                                  //          .ready
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BEGIN_BURST           (203),
		.PKT_BURSTWRAP_H           (195),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BURST_SIZE_H          (198),
		.PKT_BURST_SIZE_L          (196),
		.PKT_BURST_TYPE_H          (200),
		.PKT_BURST_TYPE_L          (199),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (205),
		.PKT_SRC_ID_L              (205),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (206),
		.PKT_THREAD_ID_H           (207),
		.PKT_THREAD_ID_L           (207),
		.PKT_CACHE_H               (214),
		.PKT_CACHE_L               (211),
		.PKT_DATA_SIDEBAND_H       (202),
		.PKT_DATA_SIDEBAND_L       (202),
		.PKT_QOS_H                 (204),
		.PKT_QOS_L                 (204),
		.PKT_ADDR_SIDEBAND_H       (201),
		.PKT_ADDR_SIDEBAND_L       (201),
		.ST_DATA_W                 (217),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (4'b0000)
	) entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent (
		.clk              (clk166_clk),                                                                                  //       clk.clk
		.reset            (rst_controller_reset_out_reset),                                                              // clk_reset.reset
		.av_address       (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_address),                //        av.address
		.av_write         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_write),                  //          .write
		.av_read          (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata     (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata      (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest   (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable    (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount    (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess   (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock          (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data          (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket   (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid         (rsp_xbar_demux_src1_valid),                                                                   //        rp.valid
		.rp_data          (rsp_xbar_demux_src1_data),                                                                    //          .data
		.rp_channel       (rsp_xbar_demux_src1_channel),                                                                 //          .channel
		.rp_startofpacket (rsp_xbar_demux_src1_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket   (rsp_xbar_demux_src1_endofpacket),                                                             //          .endofpacket
		.rp_ready         (rsp_xbar_demux_src1_ready)                                                                    //          .ready
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (203),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_TRANS_LOCK            (180),
		.PKT_SRC_ID_H              (205),
		.PKT_SRC_ID_L              (205),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (206),
		.PKT_BURSTWRAP_H           (195),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (182),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_BURST_SIZE_H          (198),
		.PKT_BURST_SIZE_L          (196),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (217),
		.AVS_BURSTCOUNT_W          (7),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1)
	) mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent (
		.clk                     (clk166_clk),                                                                                  //             clk.clk
		.reset                   (rst_controller_002_reset_out_reset),                                                          //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                                    //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data)         //                .data
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (218),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk166_clk),                                                                                  //       clk.clk
		.reset             (rst_controller_002_reset_out_reset),                                                          // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	nios2_addr_router addr_router (
		.sink_ready         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (entropic_ip_top_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk166_clk),                                                                                //       clk.clk
		.reset              (rst_controller_reset_out_reset),                                                            // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_src_valid),                                                                     //          .valid
		.src_data           (addr_router_src_data),                                                                      //          .data
		.src_channel        (addr_router_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                                //          .endofpacket
	);

	nios2_addr_router addr_router_001 (
		.sink_ready         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (entropic_ip_top_avalon_master_1_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk166_clk),                                                                                  //       clk.clk
		.reset              (rst_controller_reset_out_reset),                                                              // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                                   //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                                   //          .valid
		.src_data           (addr_router_001_src_data),                                                                    //          .data
		.src_channel        (addr_router_001_src_channel),                                                                 //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                              //          .endofpacket
	);

	nios2_id_router id_router (
		.sink_ready         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk166_clk),                                                                        //       clk.clk
		.reset              (rst_controller_002_reset_out_reset),                                                // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                               //       src.ready
		.src_valid          (id_router_src_valid),                                                               //          .valid
		.src_data           (id_router_src_data),                                                                //          .data
		.src_channel        (id_router_src_channel),                                                             //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                          //          .endofpacket
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS        (1),
		.OUTPUT_RESET_SYNC_EDGES ("deassert"),
		.SYNC_DEPTH              (2)
	) rst_controller (
		.reset_in0  (~reset_reset_n),                 // reset_in0.reset
		.clk        (clk166_clk),                     //       clk.clk
		.reset_out  (rst_controller_reset_out_reset), // reset_out.reset
		.reset_in1  (1'b0),                           // (terminated)
		.reset_in2  (1'b0),                           // (terminated)
		.reset_in3  (1'b0),                           // (terminated)
		.reset_in4  (1'b0),                           // (terminated)
		.reset_in5  (1'b0),                           // (terminated)
		.reset_in6  (1'b0),                           // (terminated)
		.reset_in7  (1'b0),                           // (terminated)
		.reset_in8  (1'b0),                           // (terminated)
		.reset_in9  (1'b0),                           // (terminated)
		.reset_in10 (1'b0),                           // (terminated)
		.reset_in11 (1'b0),                           // (terminated)
		.reset_in12 (1'b0),                           // (terminated)
		.reset_in13 (1'b0),                           // (terminated)
		.reset_in14 (1'b0),                           // (terminated)
		.reset_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS        (1),
		.OUTPUT_RESET_SYNC_EDGES ("deassert"),
		.SYNC_DEPTH              (2)
	) rst_controller_001 (
		.reset_in0  (~reset_reset_n),                     // reset_in0.reset
		.clk        (clk50_clk),                          //       clk.clk
		.reset_out  (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_in1  (1'b0),                               // (terminated)
		.reset_in2  (1'b0),                               // (terminated)
		.reset_in3  (1'b0),                               // (terminated)
		.reset_in4  (1'b0),                               // (terminated)
		.reset_in5  (1'b0),                               // (terminated)
		.reset_in6  (1'b0),                               // (terminated)
		.reset_in7  (1'b0),                               // (terminated)
		.reset_in8  (1'b0),                               // (terminated)
		.reset_in9  (1'b0),                               // (terminated)
		.reset_in10 (1'b0),                               // (terminated)
		.reset_in11 (1'b0),                               // (terminated)
		.reset_in12 (1'b0),                               // (terminated)
		.reset_in13 (1'b0),                               // (terminated)
		.reset_in14 (1'b0),                               // (terminated)
		.reset_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS        (1),
		.OUTPUT_RESET_SYNC_EDGES ("deassert"),
		.SYNC_DEPTH              (2)
	) rst_controller_002 (
		.reset_in0  (~mem_if_ddr3_emif_0_afi_reset_reset), // reset_in0.reset
		.clk        (clk166_clk),                          //       clk.clk
		.reset_out  (rst_controller_002_reset_out_reset),  // reset_out.reset
		.reset_in1  (1'b0),                                // (terminated)
		.reset_in2  (1'b0),                                // (terminated)
		.reset_in3  (1'b0),                                // (terminated)
		.reset_in4  (1'b0),                                // (terminated)
		.reset_in5  (1'b0),                                // (terminated)
		.reset_in6  (1'b0),                                // (terminated)
		.reset_in7  (1'b0),                                // (terminated)
		.reset_in8  (1'b0),                                // (terminated)
		.reset_in9  (1'b0),                                // (terminated)
		.reset_in10 (1'b0),                                // (terminated)
		.reset_in11 (1'b0),                                // (terminated)
		.reset_in12 (1'b0),                                // (terminated)
		.reset_in13 (1'b0),                                // (terminated)
		.reset_in14 (1'b0),                                // (terminated)
		.reset_in15 (1'b0)                                 // (terminated)
	);

	nios2_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk166_clk),                        //       clk.clk
		.reset              (rst_controller_reset_out_reset),    // clk_reset.reset
		.sink_ready         (addr_router_src_ready),             //      sink.ready
		.sink_channel       (addr_router_src_channel),           //          .channel
		.sink_data          (addr_router_src_data),              //          .data
		.sink_startofpacket (addr_router_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),       //          .endofpacket
		.sink_valid         (addr_router_src_valid),             //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),         //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),         //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),          //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),       //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket), //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)    //          .endofpacket
	);

	nios2_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (clk166_clk),                            //       clk.clk
		.reset              (rst_controller_reset_out_reset),        // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),             //      sink.ready
		.sink_channel       (addr_router_001_src_channel),           //          .channel
		.sink_data          (addr_router_001_src_data),              //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),       //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),             //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),         //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),         //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),          //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),       //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket), //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)    //          .endofpacket
	);

	nios2_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk166_clk),                            //       clk.clk
		.reset               (rst_controller_002_reset_out_reset),    // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)    //          .endofpacket
	);

	nios2_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk166_clk),                         //       clk.clk
		.reset              (rst_controller_002_reset_out_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                //      sink.ready
		.sink_channel       (id_router_src_channel),              //          .channel
		.sink_data          (id_router_src_data),                 //          .data
		.sink_startofpacket (id_router_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)     //          .endofpacket
	);

endmodule
