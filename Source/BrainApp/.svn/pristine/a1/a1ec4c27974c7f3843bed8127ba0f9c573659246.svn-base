library ieee ;
use ieee.std_logic_1164.all ;
use ieee.std_logic_arith.all ;
use ieee.std_logic_unsigned.all ;
use ieee.numeric_std.all;    


entity TesterFpgaFilter is
   generic ( NumOfFilterElements : integer);
   port (
      RST       : in std_logic;
      CLK       : in std_logic;

      DataIn    : in std_logic_vector(31 downto 0);
      HdrIn     : in std_logic_vector( 3 downto 0);
      OffsetIn  : in std_logic_vector(15 downto 0);
      PktTypeIn : in std_logic_vector( 3 downto 0);
      DataInEn  : in std_logic;

      DataOut   : out std_logic_vector(31 downto 0);
      HdrOut    : out std_logic_vector( 3 downto 0);
      OffsetOut : out std_logic_vector(15 downto 0);
      DataOutEn : out std_logic;
         
      ConfigRegsIn   : in std_logic_vector(31 downto 0);
      ConfigRegsOut  : out std_logic_vector(31 downto 0);
      ConfigRegsEn   : in std_logic;
      ConfigRegsLd   : in std_logic;
      ConfigRegsSt   : in std_logic
   ); 
end TesterFpgaFilter;

architecture RTL of TesterFpgaFilter is
   
   component TesterFpgaFilterElement 
      port (
         RST       : in std_logic;
         CLK       : in std_logic;

         DataIn    : in std_logic_vector(31 downto 0);
         HdrIn     : in std_logic_vector( 3 downto 0);
         OffsetIn  : in std_logic_vector(15 downto 0);
         PktTypeIn : in std_logic_vector( 3 downto 0);
         DataInEn  : in std_logic;
         
         FilterOut : out std_logic;

         ConfigRegsIn   : in std_logic_vector(31 downto 0);
         ConfigRegsOut  : out std_logic_vector(31 downto 0);
         ConfigRegsEn   : in std_logic;
         ConfigRegsLd   : in std_logic;
         ConfigRegsSt   : in std_logic
      );
   end component;

   signal FilterOutVec : std_logic_vector(NumOfFilterElements-1 downto 0);

   type ConfigRegBus_t        is array (0 to NumOfFilterElements) of std_logic_vector(31 downto 0);

   signal ConfigRegsInIntrCon  : ConfigRegBus_t;
   signal ConfigRegsOutIntrCon : ConfigRegBus_t;
   
   signal dDataIn    : std_logic_vector(31 downto 0);
   signal dHdrIn     : std_logic_vector( 3 downto 0);
   signal dOffsetIn  : std_logic_vector(15 downto 0);
   signal dDataInEn  : std_logic;
   
begin

   gen_filter: for i in 0 to NumOfFilterElements-1 generate
      FilterElement : TesterFpgaFilterElement port map (
         RST => RST,
         CLK => CLK,

         DataIn    => DataIn,
         HdrIn     => HdrIn,
         OffsetIn  => OffsetIn,
         PktTypeIn => PktTypeIn,
         DataInEn  => DataInEn,
            
         FilterOut => FilterOutVec(i),

         ConfigRegsIn   => ConfigRegsInIntrCon(i),
         ConfigRegsOut  => ConfigRegsOutIntrCon(i),
         ConfigRegsEn   => ConfigRegsEn,
         ConfigRegsLd   => ConfigRegsLd,
         ConfigRegsSt   => ConfigRegsSt
      );
   end generate gen_filter;

   -- DUT Data Filter
   process (CLK, RST)
   begin
      if RST = '1' then
         DataOut   <= (others=>'0');
         HdrOut    <= (others=>'0');
         OffsetOut <= (others=>'0');
         DataOutEn <= '0';
      elsif CLK'event and CLK = '1' then
         dDataIn   <= DataIn;
         dHdrIn    <= HdrIn;
         dOffsetIn <= OffsetIn;
         dDataInEn <= DataInEn;

         if FilterOutVec /= std_logic_vector(to_unsigned(0,NumOfFilterElements)) then
            DataOut   <= dDataIn;
            HdrOut    <= dHdrIn;
            OffsetOut <= dOffsetIn;
            DataOutEn <= dDataInEn;
         else
            DataOutEn <= '0';
         end if;
      end if;
   end process;

   -- Connect config registers
   config_regs: for i in 1 to NumOfFilterElements-1 generate
      ConfigRegsInIntrCon(i-1) <= ConfigRegsOutIntrCon(i);
   end generate;
   ConfigRegsInIntrCon(NumOfFilterElements-1) <= ConfigRegsIn;
   ConfigRegsOut <= ConfigRegsOutIntrCon(0);
   
end RTL;

