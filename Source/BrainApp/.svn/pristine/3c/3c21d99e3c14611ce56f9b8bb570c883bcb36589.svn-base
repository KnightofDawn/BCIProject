import string
from xml.etree import ElementTree
from time import sleep
from collections import defaultdict

# Import the modules QtCore (for low level Qt functions)
# QtGui (for visual/GUI related Qt functions)
from PyQt4 import QtCore, QtGui, Qt

from UtilityClasses import *
# The GUI MainWindow object from the python code generated using the .ui file
"""
Created on Sat Feb 09 10:16:56 2013

@author: yozturk
"""
class filterHeaders(QtGui.QGroupBox): 
     deleteClickedSignal = QtCore.pyqtSignal()
     def __init__(self,master):
      
        self.container = master
        self.isEnabled = True
        self.DrawFilterHeaders(master)
        
     def DrawFilterHeaders(self,master):
        hbox = master
        
        dataTypeLabel = QtGui.QLabel("StrmVar")         
        labelFilter =QtGui.QLabel("BaseVar ")
        labelOffset = QtGui.QLabel("OffsetVar")
        labelRange = QtGui.QLabel("RangeVar")
        dataTypeLabel.setFixedWidth(75)
        labelFilter.setFixedWidth(75)
        labelBase = QtGui.QLabel("BaseAddr") 
        labelBase.setFixedWidth(75)      
        labelStreamMin = QtGui.QLabel("StrmIDMin")
        labelStreamMin.setFixedWidth(60)
        labelStreamMax = QtGui.QLabel("StrmIDMax")      
        labelStreamMax.setFixedWidth(60)
        labelOffsetMin = QtGui.QLabel("OffsetMin")        
        labelOffsetMin.setFixedWidth(50)
        labelOffsetMax = QtGui.QLabel("OffsetMax")      
        labelOffsetMax.setFixedWidth(50)
        labelBits = QtGui.QLabel("BitRange")      
        labelBits.setFixedWidth(50)
        labelDecimation = QtGui.QLabel("DeciFactor") 
        labelDecimation.setFixedWidth(50)
        self.EnableAll=QtGui.QPushButton("Enable")
        self.SelectAll=QtGui.QPushButton("Select")        
        hbox.addWidget(dataTypeLabel,0,0)        
        hbox.addWidget(labelFilter,0,1)
        hbox.addWidget(labelOffset,0,2)
        hbox.addWidget(labelRange,0,3)    
        hbox.addWidget(labelBase,0,4)
        hbox.addWidget(labelStreamMin,0,5)
        hbox.addWidget(labelStreamMax,0,6)
        hbox.addWidget(labelOffsetMin,0,7)
        hbox.addWidget(labelOffsetMax,0,8)
        hbox.addWidget(labelBits,0,9)
        hbox.addWidget(labelDecimation,0,10)
        hbox.addWidget(self.EnableAll,0,11)
        hbox.addWidget(self.SelectAll,0,12)
                
                
          
        #self.groupBox.setLayout(hbox)
        #master.addWidget(self.groupBox)


class filterItem(QtGui.QGroupBox): 
     deleteClickedSignal = QtCore.pyqtSignal()
     def __init__(self,master,baseVarList,filterindex):
      
        self.container = master
        self.isEnabled = True
        self.baseVarList =baseVarList
        self.addFilterElement(master)
        self.index = filterindex
        self.DrawFilterElement(master)
        self.setStyleEnabled(True)
    

     def addFilterElement(self,master):
         
        self.dataVar = QtGui.QComboBox()
        self.dataVar.setFixedWidth(75)
        self.dataVar.NoInsert
        self.dataVar.setEditable(True) 
         
        self.baseVar = QtGui.QComboBox()
        self.baseVar.setFixedWidth(75)
        self.baseVar.NoInsert
        self.baseVar.setEditable(True) 
       
      
        
        self.OffsetVar = QtGui.QComboBox()
        self.OffsetVar.setFixedWidth(150)
        self.OffsetVar.setEditable(True)
        self.OffsetVar.NoInsert

        self.rangeVar = QtGui.QComboBox()
        self.rangeVar.setFixedWidth(125)
        self.rangeVar.setEditable(True)
        self.rangeVar.NoInsert
        
        
        
        expression8d = Qt.QRegExp("^\\b(0x([0-9A-F]{1,8}))\\b$")        
        self.baseAddres = QtGui.QLineEdit()
        self.baseAddres.setFixedWidth(75)
        self.baseAddres.setValidator(Qt.QRegExpValidator(expression8d,self.baseAddres))    
        #self.baseAddres.setMaxLength(8)
        #self.baseAddres.setInputMask("hhhhhhhh")
        self.baseAddres.setText("0x")
        
        expression2 = Qt.QRegExp("^\\b(0x([0-9A-F]{1,2}))\\b$")
        self.streamIDMin = QtGui.QLineEdit()     
        self.streamIDMin.setValidator(Qt.QRegExpValidator(expression2,self.streamIDMin))                  
   
        self.streamIDMin.setFixedWidth(50)
        #self.streamIDMin.setMaxLength(2)
        self.streamIDMin.setText("0x")
    
        self.streamIDMax = QtGui.QLineEdit()        
        self.streamIDMax.setValidator(Qt.QRegExpValidator(expression2,self.streamIDMax))    
        self.streamIDMax.setFixedWidth(50)
        #self.streamIDMax.setMaxLength(2)
        self.streamIDMax.setText("0x")
        
       
        expression4d = Qt.QRegExp("^\\b(0x([0-9A-F]{1,4}))\\b$")
        self.offsetMin = QtGui.QLineEdit()
        self.offsetMin.setValidator(Qt.QRegExpValidator(expression4d,self.offsetMin))    
        self.offsetMin.setFixedWidth(50)
        self.offsetMin.setText("0x")
       #self.offsetMin.setMaxLength(4)
        #self.offsetMin.setInputMask("hhhh")

#        expression = Qt.QRegExp("^\\b(0x([0-9A-F]{1,4}))| (([0-2])([0-5])?([0-5])?)\\b$")

        #expression = Qt.QRegExp("^\\b(0x([0-9A-F]{1,4}))\\b$")
        self.offsetMax = QtGui.QLineEdit()
        self.offsetMax.setValidator(Qt.QRegExpValidator(expression4d,self.offsetMax))
        self.offsetMax.setFixedWidth(50)
        #self.offsetMax.setMaxLength(4)
        #self.offsetMax.setInputMask("hhhh")
 #       self.offsetMax.setText("0x")
      
        self.bitRange = QtGui.QLineEdit()
        self.bitRange.setFixedWidth(50)
        self.bitRange.setEnabled(False)
     
        self.decimation = QtGui.QLineEdit()
        self.decimation.setFixedWidth(50)
        self.decimation.setValidator(Qt.QRegExpValidator(expression2,self.decimation))   
        self.decimation.setText("0x")
        
    
        self.enableButton = QtGui.QCheckBox()
        self.checkBox = QtGui.QCheckBox()
 
        for baseElement in self.baseVarList:
            self.dataVar.addItem(baseElement) 
        self.enableButton.setChecked(True)
    
    
        self.proxy3 = Qt.QSortFilterProxyModel(self.dataVar)
        self.proxy3.setSourceModel(self.dataVar.model())
        self.dataVar.model().setParent(self.proxy3)
        self.dataVar.setModel(self.proxy3)
        self.dataVar.model().sort(0)
        
        self.proxy = Qt.QSortFilterProxyModel(self.baseVar)
        self.proxy.setSourceModel(self.baseVar.model())
        self.baseVar.model().setParent(self.proxy)
        self.baseVar.setModel(self.proxy)
        self.baseVar.model().sort(0)
        
        self.proxy1 = Qt.QSortFilterProxyModel(self.OffsetVar)
        self.proxy1.setSourceModel(self.OffsetVar.model())
        self.OffsetVar.model().setParent(self.proxy1)
        self.OffsetVar.setModel(self.proxy1)
        self.OffsetVar.model().sort(0)

        self.proxy2 = Qt.QSortFilterProxyModel(self.rangeVar)
        self.proxy2.setSourceModel(self.rangeVar.model())
        self.rangeVar.model().setParent(self.proxy2)
        self.rangeVar.setModel(self.proxy2)
        self.rangeVar.model().sort(0)
        
        #self.baseVar.model().setFilterFixedString("TxCs")
        
        
        self.baseVar.setCurrentIndex(0)
        self.baseAddres.setText(Qt.QString("%1") .arg(0x0))
        self.streamIDMin.setText(Qt.QString("%1") .arg(0))
        self.streamIDMax.setText(Qt.QString("%1") .arg(0xFF))                       
        self.offsetMin.setText(Qt.QString("%1") .arg(0))
        self.offsetMax.setText(Qt.QString("%1") .arg(0xFFFF))                        
        self.bitRange.setText(Qt.QString("%1") .arg(0))
        self.decimation.setText(Qt.QString("%1") .arg(0x0))
    


     def DrawFilterElement(self,master):
        hbox = master           
        hbox.addWidget(self.dataVar,self.index,0)
      
        hbox.addWidget(self.baseVar,self.index,1)
        hbox.addWidget(self.OffsetVar,self.index,2)
        hbox.addWidget(self.rangeVar,self.index,3)
        
        
        #hbox.addWidget(labelBase,0,1)
        hbox.addWidget(self.baseAddres,self.index,4)
        #hbox.addWidget(labelStreamMin,0,2)
        hbox.addWidget(self.streamIDMin,self.index,5)

        #hbox.addWidget(labelStreamMax,0,3)
        hbox.addWidget(self.streamIDMax,self.index,6)

        #hbox.addWidget(labelOffsetMin,0,4)
        hbox.addWidget(self.offsetMin,self.index,7)

        #hbox.addWidget(labelOffsetMax,0,5)
        hbox.addWidget(self.offsetMax,self.index,8)

        #hbox.addWidget(labelBits,0,6)
        hbox.addWidget(self.bitRange,self.index,9)
        
        #hbox.addWidget(labelDecimation,0,7)
        hbox.addWidget(self.decimation,self.index,10)
        hbox.addWidget(self.enableButton,self.index,11)
        hbox.addWidget(self.checkBox,self.index,12)
                
          
        #self.groupBox.setLayout(hbox)
        #master.addWidget(self.groupBox)


        #self.buttonDelete.clicked.connect(self.deleteButtonClicked)
     def deleteFilter(self,master):
        self.dataVar.deleteLater()
        self.baseVar.deleteLater()
        self.OffsetVar.deleteLater()
        self.rangeVar.deleteLater()        
        self.baseAddres.deleteLater()
        self.streamIDMin.deleteLater()
        self.streamIDMax.deleteLater()
        self.offsetMax.deleteLater()
        self.offsetMin.deleteLater()
        self.bitRange.deleteLater()
        self.decimation.deleteLater()
        self.checkBox.deleteLater()
        self.enableButton.deleteLater()
        master.update()
        del(self)
     
     def copyFilter(self,inputfilter):
        self.dataVar.setCurrentIndex(inputfilter.dataVar.currentIndex())                      
        self.baseVar.setCurrentIndex(inputfilter.baseVar.currentIndex())             
        self.OffsetVar.setCurrentIndex(inputfilter.OffsetVar.currentIndex())                     
        self.rangeVar.setCurrentIndex(inputfilter.rangeVar.currentIndex())                     
 
        self.baseAddres.setText(inputfilter.baseAddres.text()) 
        self.streamIDMin.setText(inputfilter.streamIDMin.text()) 
        self.streamIDMax.setText(inputfilter.streamIDMax.text()) 
        
        self.offsetMin.setText(inputfilter.offsetMin.text())
        self.offsetMax.setText(inputfilter.offsetMax.text())
                
        self.bitRange.setText(inputfilter.bitRange.text()) 
        self.decimation.setText(inputfilter.decimation.text()) 
        self.enableButton.setChecked(inputfilter.enableButton.isChecked())
        self.checkBox.setChecked(inputfilter.checkBox.isChecked()) 
    
     def compareFilter(self,inputfilter):
        returnvalue = 0
        if (self.baseAddres.text() == inputfilter.baseAddres.text()): 
            if (self.streamIDMin.text() == inputfilter.streamIDMin.text()): 
                if (self.streamIDMax.text() == inputfilter.streamIDMax.text()):
                    if (self.offsetMin.text() == inputfilter.offsetMin.text()):
                        if (self.offsetMax.text() == inputfilter.offsetMax.text()):                
                            if (self.bitRange.text() == inputfilter.bitRange.text()): 
                                returnvalue = 1
        return(returnvalue)
        
        
     def  convertToList(self):
        self.listRep = [self.dataVar.currentIndex(),\
                        self.baseVar.currentIndex(),\
                        self.OffsetVar.currentIndex(),\
                        self.rangeVar.currentIndex(),\
                        str(self.baseAddres.text()),\
                        str(self.streamIDMin.text()),\
                        str(self.streamIDMax.text()),\
                        str(self.offsetMin.text()),\
                        str(self.offsetMax.text()),\
                        str(self.bitRange.text()),\
                        str(self.decimation.text()),\
                        str(self.enableButton.isChecked()),\
                        str(self.checkBox.isChecked())] 
        return(self.listRep)
        
     def setStyleEnabled(self,isenabled):
        if (isenabled):
            self.streamIDMin.setStyleSheet("background-color: rgb(255, 255, 255);"
                                           "color:green")
            self.streamIDMax.setStyleSheet("background-color: rgb(255, 255, 255);"
                                           "color:green")           
            self.dataVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")
            self.OffsetVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")
            self.rangeVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")
            self.baseVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")
            self.baseAddres.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")   
            self.offsetMin.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")
            self.offsetMax.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")   
                                           
            self.bitRange.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")   
            self.decimation.setStyleSheet("background-color: rgb(255, 255, 255);\n"
  #                                         "border:2px solid rgb(255, 0, 0);"
                                           "color:green")
            self.enableButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")      
            self.checkBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:green")                
        else:
            self.streamIDMin.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.streamIDMax.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")           
            self.dataVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.baseVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")

            self.OffsetVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.rangeVar.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.baseAddres.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")   
            self.offsetMin.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.offsetMax.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")                                           
            self.bitRange.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")   
            self.decimation.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
            self.enableButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")      
            self.checkBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "color:red")
     def  addressChanged(self,text):
        print ("address Changed")
        self.dataVar.setCurrentText("Please Select")
                                                                      