# -*- coding: utf-8 -*-
"""
Created on Sat Feb 09 10:25:26 2013

@author: yozturk
"""
# Import the modules QtCore (for low level Qt functions)
# QtGui (for visual/GUI related Qt functions)
from PyQt4 import QtCore, QtGui, Qt


class triggerItem(QtGui.QGroupBox): 
     def __init__(self,master,baseVarList,Line):    
        self.hbox = master
        self.numLines = Line
        self.container = master
        self.baseVarList =baseVarList
        self.addTrigger()
      
         
     def addTrigger(self):
        
        self.lineEdit1 = QtGui.QLineEdit()
        self.lineEdit1.setFixedWidth(50)
        
        self.labelIF = QtGui.QLabel("IF")
       
        self.dataVar = QtGui.QComboBox()
        self.dataVar.setFixedWidth(80)
        self.dataVar.NoInsert
        self.dataVar.setEditable(True) 
         
         
        self.baseVar = QtGui.QComboBox()
        self.baseVar.setFixedWidth(80)
        self.baseVar.NoInsert
        self.baseVar.setEditable(True) 
       
        self.OffsetVar = QtGui.QComboBox()
        self.OffsetVar.setFixedWidth(150)
        self.OffsetVar.setEditable(True)
        self.OffsetVar.NoInsert

        self.rangeVar = QtGui.QComboBox()
        self.rangeVar.setFixedWidth(150)
        self.rangeVar.setEditable(True)
        self.rangeVar.NoInsert
        
        for baseElement in self.baseVarList:
            self.dataVar.addItem(baseElement) 
            
       
    
        self.proxy3 = Qt.QSortFilterProxyModel(self.dataVar)
        self.proxy3.setSourceModel(self.dataVar.model())
        self.dataVar.model().setParent(self.proxy3)
        self.dataVar.setModel(self.proxy3)
        self.dataVar.model().sort(0)
        
        self.proxy = Qt.QSortFilterProxyModel(self.baseVar)
        self.proxy.setSourceModel(self.baseVar.model())
        self.baseVar.model().setParent(self.proxy)
        self.baseVar.setModel(self.proxy)
        self.baseVar.model().sort(0)
        
        self.proxy1 = Qt.QSortFilterProxyModel(self.OffsetVar)
        self.proxy1.setSourceModel(self.OffsetVar.model())
        self.OffsetVar.model().setParent(self.proxy1)
        self.OffsetVar.setModel(self.proxy1)
        self.OffsetVar.model().sort(0)

        self.proxy2 = Qt.QSortFilterProxyModel(self.rangeVar)
        self.proxy2.setSourceModel(self.rangeVar.model())
        self.rangeVar.model().setParent(self.proxy2)
        self.rangeVar.setModel(self.proxy2)
        self.rangeVar.model().sort(0)        
        
        #self.combo1 = QtGui.QComboBox()
        #self.combo1.setFixedWidth(300)
        
        self.combo2 = QtGui.QComboBox()
        self.combo2.setFixedWidth(50)
        self.combo2.addItems(["==","!=",">","<"])

        self.combo3 = QtGui.QComboBox()
        self.combo3.setFixedWidth(50)
        self.combo3.addItems(["goto","trigger"])
        

        self.combo4 = QtGui.QComboBox()
        self.combo4.setFixedWidth(50)
        self.combo4.addItems(["goto","trigger"])

        
        self.lineEdit2 = QtGui.QLineEdit()
        self.lineEdit2.setFixedWidth(50)
        self.lineEdit2.setToolTip("The value")
        self.lineEdit2.setText("0")

        self.lineEdit3 = QtGui.QLineEdit()
        self.lineEdit3.setFixedWidth(50)
        self.lineEdit3.setText("0")

        self.labeltimes = QtGui.QLabel("times. then")
       
        self.lineEdit4 = QtGui.QLineEdit()
        self.lineEdit4.setFixedWidth(50)   
        self.lineEdit4.setText("0")

        self.lineEdit4.setToolTip("The ID of the Trigger to be connected")
       
       # self.combo3 = QtGui.QComboBox()
        #self.combo3.setFixedWidth(75)

        self.labelelse = QtGui.QLabel("else")

        self.lineEdit5 = QtGui.QLineEdit()
        self.lineEdit5.setFixedWidth(50)
        self.lineEdit5.setText("0")
        self.lineEdit5.setToolTip("The ID of the Trigger to be connected")
        #self.combo4 = QtGui.QComboBox()
        #self.combo4.setFixedWidth(75)    
   
        self.checkBox = QtGui.QCheckBox("Select")
        self.loadCounter = QtGui.QCheckBox("Load Counter")
        
        self.hbox.addWidget(self.lineEdit1, self.numLines,0)
        self.hbox.addWidget(self.labelIF, self.numLines,1)
        self.hbox.addWidget(self.dataVar, self.numLines,2)
        self.hbox.addWidget(self.baseVar, self.numLines,3)
        self.hbox.addWidget(self.OffsetVar, self.numLines,4)
        self.hbox.addWidget(self.rangeVar, self.numLines,5)

#        self.hbox.addWidget(self.combo1, self.numLines,2)
        self.hbox.addWidget(self.combo2, self.numLines,6)
        self.hbox.addWidget(self.lineEdit2, self.numLines,7)
        self.hbox.addWidget(self.lineEdit3, self.numLines,8)
       
        self.hbox.addWidget(self.labeltimes, self.numLines,9)

        self.hbox.addWidget(self.combo3, self.numLines,10)
        
        #self.hbox.addWidget(self.combo3)
        self.hbox.addWidget(self.lineEdit4, self.numLines,11)
               
        self.hbox.addWidget(self.labelelse, self.numLines,12)
        self.hbox.addWidget(self.combo4, self.numLines,13)
        #self.hbox.addWidget(self.combo4)
        self.hbox.addWidget(self.lineEdit5, self.numLines,14)
       
        self.hbox.addWidget(self.loadCounter, self.numLines,15)                
           
        self.hbox.addWidget(self.checkBox, self.numLines,16)    
               
        #self.groupBox.setLayout(self.hbox)
        #for filterElement in self.filterList:
        #    self.combo1.addItem(filterElement[0]) 
       
        self.numLines = self.numLines + 1
   #     master.addWidget(self.groupBox)

     def deleteTrigger(self,master):
        self.lineEdit1.deleteLater()
        self.lineEdit2.deleteLater()
        self.lineEdit3.deleteLater()
        self.lineEdit4.deleteLater()
        self.lineEdit5.deleteLater()
        self.dataVar.deleteLater()
        self.baseVar.deleteLater()
        self.OffsetVar.deleteLater()
        self.rangeVar.deleteLater()        
 #       self.combo1.deleteLater()
        self.combo2.deleteLater()
        self.combo3.deleteLater()
        self.combo4.deleteLater()
        self.checkBox.deleteLater()
        self.labelIF.deleteLater()
        self.labeltimes.deleteLater()
        self.labelelse.deleteLater()
        self.loadCounter.deleteLater()
        master.update()
        del(self)
        